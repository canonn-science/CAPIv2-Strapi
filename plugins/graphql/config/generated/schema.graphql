"""Reporting for Bark Mounds"""
type Bmreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_BMREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Bmsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Bark Mound sites"""
type Bmsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

"""Bodies stored in the Canonn database"""
type Body {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  system: System
  bodyName: String!
  edsmID: Float
  edsmID64: Float
  edsmType: String
  edsmSubtype: String
  edsmOffset: Int
  edsmDistanceToArrival: Float
  edsmIsMainStar: Boolean
  edsmIsScoopable: Boolean
  edsmIsLandable: Boolean
  edsmAge: Int
  edsmLuminosity: String
  edsmAbsoluteMagnitude: Float
  edsmSolarMasses: Float
  edsmSolarRadius: Float
  edsmGravity: Float
  edsmEarthMasses: Float
  edsmRadius: Float
  edsmSurfaceTemperature: Float
  edsmVolcanismType: String
  edsmAtmosphereType: String
  edsmTerraformingState: String
  edsmOrbitalPeriod: Float
  edsmSemiMajorAxis: Float
  edsmOrbitalEccentricity: Float
  edsmOrbitalInclination: Float
  edsmArgOfPeriapsis: Float
  edsmRotationalPeriod: Float
  edsmRotationalPeriodTidallyLocked: Boolean
  edsmAxialTilt: Float
  edsmAtmosphere: JSON
  edsmMaterial: JSON
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  bodyLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Reporting for Brain Trees"""
type Btreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_BTREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Btsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Brain Tree sites"""
type Btsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

"""CMDRs who have discovered sites"""
type Cmdr {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cmdrName: String!
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

enum ENUM_BMREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_BTREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_FGREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_FMREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_GENREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_GRREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_GRREPORT_TYPE {
  Alpha
  Beta
  Gamma
}

enum ENUM_GSREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_GSREPORT_TYPE {
  Lacrosse
  Crossroads
  Fistbump
  Hammerbot
  Bear
  Bowl
  Turtle
}

enum ENUM_GYREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_HDREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_LOCATION_LOCATIONTYPE {
  BM
  BT
  FG
  FM
  GEN
  GR
  GS
  GY
  HD
  LS
  MS
  TB
  TS
  TW
  USS
}

enum ENUM_LSREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_MSREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_TBREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_TBREPORT_TYPE {
  Barnacle
  Megabarnacle
}

enum ENUM_TSREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_TSREPORT_STATUS {
  Active
  Inactive
}

enum ENUM_TWREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

enum ENUM_USSREPORT_REPORTSTATUS {
  pending
  updated
  accepted
  declined
  issue
}

"""Records rewards for faction kills"""
type Factionkillreport {
  id: ID!
  systemName: String
  edTimestamp: DateTime
  cmdrName: String
  reward: Int
  rewardingFaction: String
  victimFaction: String
  rawEvent: JSON
  isbeta: Boolean
}

"""Reporting for Fungal Gourds"""
type Fgreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_FGREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Fgsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Fungal Gourd sites"""
type Fgsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

"""Reporting for Fumaroles"""
type Fmreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  type: String
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_FMREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Fmsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Fumarole sites"""
type Fmsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Fmtype
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

"""Type of Fumarole"""
type Fmtype {
  id: ID!
  type: String!
}

"""Reporting for Generation Ships"""
type Genreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  orbitBody: String
  shipName: String!
  directionSystem: String
  distance: Float
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_GENREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Gensite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Generation Ship sites"""
type Gensite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  shipName: String!
  directionSystem: System
  distance: Float
  discoveredBy: Cmdr
}

"""Active groups of Obelisks at a Guardian Ruins site"""
type Gractivegroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  grSite: Grsite
  activeGroup: Grobeliskgroup
}

"""Active Obeliskss at a Guardian Ruin site"""
type Gractiveobelisk {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  grSite: Grsite
  activeObelisk: Grobelisk
}

"""Artifacts used at a Guardian Ruin site"""
type Grartifact {
  id: ID!
  artifactName: String!
}

"""Category of data recieved from Guardian Ruin Obelisks"""
type Grcodexcategory {
  id: ID!
  categoryName: String
}

"""Data entires received at a Guardian Ruin site"""
type Grcodexdata {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  grCodexCategory: Grcodexcategory
  grPrimaryArtifact: Grartifact
  grSecondaryArtifact: Grartifact
  codexNumber: Int!
  text: String!
}

"""Obelisks at a Guardian Ruin site"""
type Grobelisk {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  grType: Grtype
  grObeliskGroup: Grobeliskgroup
  obeliskNumber: Int!
  broken: Boolean
  grCodexData: Grcodexdata
  verified: Boolean
}

"""Groups of Obelisks at a Guardian Ruin site"""
type Grobeliskgroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  grType: Grtype
  groupName: String!
  amount: Int!
}

type Grobeliskgroupreport {
  id: ID!
  grreport: Grreport
  grobeliskgroup: Grobeliskgroup
}

type Grobeliskreport {
  id: ID!
  grreport: Grreport
  grobelisk: Grobelisk
}

"""Reporting for Guardian Ruins"""
type Grreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  type: ENUM_GRREPORT_TYPE!
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_GRREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Grsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  grobeliskgroupreport(sort: String, limit: Int, start: Int, where: JSON): [Grobeliskgroupreport]
  grobeliskreport(sort: String, limit: Int, start: Int, where: JSON): [Grobeliskreport]
}

"""Guardian Ruin site"""
type Grsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  type: Grtype
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
  activeGroups(sort: String, limit: Int, start: Int, where: JSON): [Gractivegroup]
  activeObelisks(sort: String, limit: Int, start: Int, where: JSON): [Gractiveobelisk]
}

"""Type of a Guardian Ruins site"""
type Grtype {
  id: ID!
  type: String!
}

"""Active groups of Obelisks at a Guardian Structure site"""
type Gsactivegroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  grSite: Gssite
  activeGroup: Gsobeliskgroup
}

"""Active Obeliskss at a Guardian Structure site"""
type Gsactiveobelisk {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gsSite: Gssite
  gsObelisk: Gsobelisk
}

"""Artifacts used at a Guardian Structures site"""
type Gsartifact {
  id: ID!
  artifactName: String!
}

"""Category of data recieved from Guardian Structure Obelisks"""
type Gscodexcategory {
  id: ID!
  categoryName: String!
}

"""Data entires received at a Guardian Structure site"""
type Gscodexdata {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gsCodexCategory: Gscodexcategory
  gsPrimaryArtifact: Gsartifact
  gsSecondaryArtifact: Gsartifact
  codexNumber: Int!
  text: String!
}

"""Obelisks at a Guardian Structure site"""
type Gsobelisk {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gsType: Gstype
  gsObeliskGroup: Gsobeliskgroup
  obeliskNumber: Int!
  broken: Boolean
  gsCodexData: Gscodexdata
  verified: Boolean
}

"""Groups of Obelisks at a Guardian Structure site"""
type Gsobeliskgroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  gsType: Gstype
  groupName: String!
  amount: Int!
}

type Gsobeliskgroupreport {
  id: ID!
  gsreport: Gsreport
  gsobeliskgroup: Gsobeliskgroup
}

type Gsobeliskreport {
  id: ID!
  gsreport: Gsreport
  gsobelisk: Gsobelisk
}

"""Reporting for Guardian Structures"""
type Gsreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  type: ENUM_GSREPORT_TYPE!
  hasDatabank: Boolean
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_GSREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Gssite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  gsobeliskgroupreport(sort: String, limit: Int, start: Int, where: JSON): [Gsobeliskgroupreport]
  gsobeliskreport(sort: String, limit: Int, start: Int, where: JSON): [Gsobeliskreport]
}

"""Guardian Structure sites"""
type Gssite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  type: Gstype
  hasDatabank: Boolean
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
  activeGroups(sort: String, limit: Int, start: Int, where: JSON): [Gsactivegroup]
  activeObelisks(sort: String, limit: Int, start: Int, where: JSON): [Gsactiveobelisk]
}

"""Type of a Guardian Structures site"""
type Gstype {
  id: ID!
  type: String!
  journalName: String!
}

"""Reporting for Geysers"""
type Gyreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  type: String
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_GYREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Gysite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Geyser sites"""
type Gysite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Gytype
  verified: Boolean
  visible: Boolean
}

"""Type of a Geyser"""
type Gytype {
  id: ID!
  type: String!
}

"""Journal events and user reports for the Unknown Signal Sources"""
type Hdreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  fromSystemName: String!
  toSystemName: String!
  cmdrName: String!
  cmdrComment: String
  screenshot: UploadFile
  isBeta: Boolean
  reportStatus: ENUM_HDREPORT_REPORTSTATUS!
  reportComment: String
  added: Boolean
  site: Hdsite
  hdRawJson: JSON
}

"""Thargoid Hyperdiction sites"""
type Hdsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  toSystem: System
  thargoidCount: Int
  isHostile: Boolean
  discoveredBy: Cmdr
}

"""Raw journal dumps"""
type Journaldata {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  eventName: String
  systemName: String
  bodyName: String
  stationName: String
  cmdrName: String
  latitude: Float
  longitude: Float
  isBeta: Boolean
  jsonData: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Locations for sites within a System, Body, or Ring"""
type Location {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  system: System
  body: Body
  ring: Ring
  locationType: ENUM_LOCATION_LOCATIONTYPE
  bmSite: Bmsite
  btSite: Btsite
  fgSite: Fgsite
  fmSite: Fmsite
  genSite: Gensite
  grSite: Grsite
  gsSite: Gssite
  gySite: Gysite
  lsSite: Lssite
  msSite: Mssite
  tbSite: Tbsite
  tsSite: Tssite
  twSite: Twsite
  ussSite: Usssite
  hdSite(sort: String, limit: Int, start: Int, where: JSON): [Hdsite]
}

"""Reporting for Lava Spouts"""
type Lsreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_LSREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Lssite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Lava Spout sites"""
type Lssite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

union Morph = Bmreport | Bmsite | Body | Btreport | Btsite | Cmdr | Factionkillreport | Fgreport | Fgsite | Fmreport | Fmsite | Fmtype | Genreport | Gensite | Gractivegroup | Gractiveobelisk | Grartifact | Grcodexcategory | Grcodexdata | Grobelisk | Grobeliskgroup | Grobeliskgroupreport | Grobeliskreport | Grreport | Grsite | Grtype | Gsactivegroup | Gsactiveobelisk | Gsartifact | Gscodexcategory | Gscodexdata | Gsobelisk | Gsobeliskgroup | Gsobeliskgroupreport | Gsobeliskreport | Gsreport | Gssite | Gstype | Gyreport | Gysite | Gytype | Hdreport | Hdsite | Journaldata | Location | Lsreport | Lssite | Msreport | Mssite | Mstype | Nhsstopcmdrsbykill | Ring | Ringtype | System | Tbreport | Tbsite | Tbtype | Tsreport | Tssite | Tsstatus | Twreport | Twsite | Ussreport | Usssite | Usstype | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

"""Reporting for Megaships"""
type Msreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  orbitBody: String
  shipName: String!
  shipTag: String
  type: String
  flightOps: Boolean
  flightSchedule: Boolean
  dockable: Boolean
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_MSREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Mssite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Mega-Ship sites"""
type Mssite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  shipName: String!
  shipTag: String!
  type: Mstype
  flightOps: Boolean!
  flightSchedule: Boolean!
  dockable: Boolean!
  discoveredBy: Cmdr
}

"""Ship type of a Mega-ship"""
type Mstype {
  id: ID!
  type: String!
}

"""Top ten CMDRs sorted by kills for Non-Human Signal Sources"""
type Nhsstopcmdrsbykill {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  cmdrName: String
  scoutKills: Int
  cyclopsKills: Int
  basiliskKills: Int
  medusaKills: Int
  unknownKills: Int
  scoutRewards: Int
  cyclopsRewards: Int
  basiliskRewards: Int
  medusaRewards: Int
  unknownRewards: Int
  totalRewards: Int
  totalKills: Int
}

type Query {
  bmreport(id: ID!): Bmreport
  bmreports(sort: String, limit: Int, start: Int, where: JSON): [Bmreport]
  bmsite(id: ID!): Bmsite
  bmsites(sort: String, limit: Int, start: Int, where: JSON): [Bmsite]
  body(id: ID!): Body
  bodies(sort: String, limit: Int, start: Int, where: JSON): [Body]
  btreport(id: ID!): Btreport
  btreports(sort: String, limit: Int, start: Int, where: JSON): [Btreport]
  btsite(id: ID!): Btsite
  btsites(sort: String, limit: Int, start: Int, where: JSON): [Btsite]
  cmdr(id: ID!): Cmdr
  cmdrs(sort: String, limit: Int, start: Int, where: JSON): [Cmdr]
  factionkillreport(id: ID!): Factionkillreport
  factionkillreports(sort: String, limit: Int, start: Int, where: JSON): [Factionkillreport]
  fgreport(id: ID!): Fgreport
  fgreports(sort: String, limit: Int, start: Int, where: JSON): [Fgreport]
  fgsite(id: ID!): Fgsite
  fgsites(sort: String, limit: Int, start: Int, where: JSON): [Fgsite]
  fmreport(id: ID!): Fmreport
  fmreports(sort: String, limit: Int, start: Int, where: JSON): [Fmreport]
  fmsite(id: ID!): Fmsite
  fmsites(sort: String, limit: Int, start: Int, where: JSON): [Fmsite]
  fmtype(id: ID!): Fmtype
  fmtypes(sort: String, limit: Int, start: Int, where: JSON): [Fmtype]
  genreport(id: ID!): Genreport
  genreports(sort: String, limit: Int, start: Int, where: JSON): [Genreport]
  gensite(id: ID!): Gensite
  gensites(sort: String, limit: Int, start: Int, where: JSON): [Gensite]
  gractivegroup(id: ID!): Gractivegroup
  gractivegroups(sort: String, limit: Int, start: Int, where: JSON): [Gractivegroup]
  gractiveobelisk(id: ID!): Gractiveobelisk
  gractiveobelisks(sort: String, limit: Int, start: Int, where: JSON): [Gractiveobelisk]
  grartifact(id: ID!): Grartifact
  grartifacts(sort: String, limit: Int, start: Int, where: JSON): [Grartifact]
  grcodexcategory(id: ID!): Grcodexcategory
  grcodexcategories(sort: String, limit: Int, start: Int, where: JSON): [Grcodexcategory]
  grcodexdatum(id: ID!): Grcodexdata
  grcodexdata(sort: String, limit: Int, start: Int, where: JSON): [Grcodexdata]
  grobelisk(id: ID!): Grobelisk
  grobelisks(sort: String, limit: Int, start: Int, where: JSON): [Grobelisk]
  grobeliskgroup(id: ID!): Grobeliskgroup
  grobeliskgroups(sort: String, limit: Int, start: Int, where: JSON): [Grobeliskgroup]
  grobeliskgroupreport(id: ID!): Grobeliskgroupreport
  grobeliskgroupreports(sort: String, limit: Int, start: Int, where: JSON): [Grobeliskgroupreport]
  grobeliskreport(id: ID!): Grobeliskreport
  grobeliskreports(sort: String, limit: Int, start: Int, where: JSON): [Grobeliskreport]
  grreport(id: ID!): Grreport
  grreports(sort: String, limit: Int, start: Int, where: JSON): [Grreport]
  grsite(id: ID!): Grsite
  grsites(sort: String, limit: Int, start: Int, where: JSON): [Grsite]
  grtype(id: ID!): Grtype
  grtypes(sort: String, limit: Int, start: Int, where: JSON): [Grtype]
  gsactivegroup(id: ID!): Gsactivegroup
  gsactivegroups(sort: String, limit: Int, start: Int, where: JSON): [Gsactivegroup]
  gsactiveobelisk(id: ID!): Gsactiveobelisk
  gsactiveobelisks(sort: String, limit: Int, start: Int, where: JSON): [Gsactiveobelisk]
  gsartifact(id: ID!): Gsartifact
  gsartifacts(sort: String, limit: Int, start: Int, where: JSON): [Gsartifact]
  gscodexcategory(id: ID!): Gscodexcategory
  gscodexcategories(sort: String, limit: Int, start: Int, where: JSON): [Gscodexcategory]
  gscodexdatum(id: ID!): Gscodexdata
  gscodexdata(sort: String, limit: Int, start: Int, where: JSON): [Gscodexdata]
  gsobelisk(id: ID!): Gsobelisk
  gsobelisks(sort: String, limit: Int, start: Int, where: JSON): [Gsobelisk]
  gsobeliskgroup(id: ID!): Gsobeliskgroup
  gsobeliskgroups(sort: String, limit: Int, start: Int, where: JSON): [Gsobeliskgroup]
  gsobeliskgroupreport(id: ID!): Gsobeliskgroupreport
  gsobeliskgroupreports(sort: String, limit: Int, start: Int, where: JSON): [Gsobeliskgroupreport]
  gsobeliskreport(id: ID!): Gsobeliskreport
  gsobeliskreports(sort: String, limit: Int, start: Int, where: JSON): [Gsobeliskreport]
  gsreport(id: ID!): Gsreport
  gsreports(sort: String, limit: Int, start: Int, where: JSON): [Gsreport]
  gssite(id: ID!): Gssite
  gssites(sort: String, limit: Int, start: Int, where: JSON): [Gssite]
  gstype(id: ID!): Gstype
  gstypes(sort: String, limit: Int, start: Int, where: JSON): [Gstype]
  gyreport(id: ID!): Gyreport
  gyreports(sort: String, limit: Int, start: Int, where: JSON): [Gyreport]
  gysite(id: ID!): Gysite
  gysites(sort: String, limit: Int, start: Int, where: JSON): [Gysite]
  gytype(id: ID!): Gytype
  gytypes(sort: String, limit: Int, start: Int, where: JSON): [Gytype]
  hdreport(id: ID!): Hdreport
  hdreports(sort: String, limit: Int, start: Int, where: JSON): [Hdreport]
  hdsite(id: ID!): Hdsite
  hdsites(sort: String, limit: Int, start: Int, where: JSON): [Hdsite]
  journaldatum(id: ID!): Journaldata
  journaldata(sort: String, limit: Int, start: Int, where: JSON): [Journaldata]
  location(id: ID!): Location
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  lsreport(id: ID!): Lsreport
  lsreports(sort: String, limit: Int, start: Int, where: JSON): [Lsreport]
  lssite(id: ID!): Lssite
  lssites(sort: String, limit: Int, start: Int, where: JSON): [Lssite]
  msreport(id: ID!): Msreport
  msreports(sort: String, limit: Int, start: Int, where: JSON): [Msreport]
  mssite(id: ID!): Mssite
  mssites(sort: String, limit: Int, start: Int, where: JSON): [Mssite]
  mstype(id: ID!): Mstype
  mstypes(sort: String, limit: Int, start: Int, where: JSON): [Mstype]
  nhsstopcmdrsbykill(id: ID!): Nhsstopcmdrsbykill
  nhsstopcmdrsbykills(sort: String, limit: Int, start: Int, where: JSON): [Nhsstopcmdrsbykill]
  ring(id: ID!): Ring
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  ringtype(id: ID!): Ringtype
  ringtypes(sort: String, limit: Int, start: Int, where: JSON): [Ringtype]
  system(id: ID!): System
  systems(sort: String, limit: Int, start: Int, where: JSON): [System]
  tbreport(id: ID!): Tbreport
  tbreports(sort: String, limit: Int, start: Int, where: JSON): [Tbreport]
  tbsite(id: ID!): Tbsite
  tbsites(sort: String, limit: Int, start: Int, where: JSON): [Tbsite]
  tbtype(id: ID!): Tbtype
  tbtypes(sort: String, limit: Int, start: Int, where: JSON): [Tbtype]
  tsreport(id: ID!): Tsreport
  tsreports(sort: String, limit: Int, start: Int, where: JSON): [Tsreport]
  tssite(id: ID!): Tssite
  tssites(sort: String, limit: Int, start: Int, where: JSON): [Tssite]
  tsstatus(id: ID!): Tsstatus
  tsstatuses(sort: String, limit: Int, start: Int, where: JSON): [Tsstatus]
  twreport(id: ID!): Twreport
  twreports(sort: String, limit: Int, start: Int, where: JSON): [Twreport]
  twsite(id: ID!): Twsite
  twsites(sort: String, limit: Int, start: Int, where: JSON): [Twsite]
  ussreport(id: ID!): Ussreport
  ussreports(sort: String, limit: Int, start: Int, where: JSON): [Ussreport]
  usssite(id: ID!): Usssite
  usssites(sort: String, limit: Int, start: Int, where: JSON): [Usssite]
  usstype(id: ID!): Usstype
  usstypes(sort: String, limit: Int, start: Int, where: JSON): [Usstype]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

"""Rings stored in the Canonn database"""
type Ring {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  body: Body
  ringName: String!
  ringtype: Ringtype
  edsmMass: Float
  edsmInnerRadius: Float
  edsmOuterRadius: Float
  ringLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Type of a Ring"""
type Ringtype {
  id: ID!
  type: String!
}

"""Systems stored in the Canonn database"""
type System {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  edsmID: Float
  edsmID64: Float
  edsmCoordX: Float
  edsmCoordY: Float
  edsmCoordZ: Float
  edsmCoordLocked: Boolean
  bodies(sort: String, limit: Int, start: Int, where: JSON): [Body]
  systemLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Reporting for Thargoid Barnacles"""
type Tbreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  type: ENUM_TBREPORT_TYPE!
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_TBREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Tbsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Thargoid Barnacle sites"""
type Tbsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  type: Tbtype
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

"""Type of a Thargoid Barnacle"""
type Tbtype {
  id: ID!
  type: String!
}

"""Reporting for Thargoid Structures"""
type Tsreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  status: ENUM_TSREPORT_STATUS!
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_TSREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Tssite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Thargoid Structure sites"""
type Tssite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  status: Tsstatus
  verified: Boolean
  visible: Boolean
  discoveredBy: Cmdr
}

"""Status of a Thargoid Structure"""
type Tsstatus {
  id: ID!
  status: String!
}

"""Reporting for Tube Worms"""
type Twreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String!
  bodyName: String!
  latitude: Float!
  longitude: Float!
  count: Int
  cmdrName: String!
  cmdrComment: String
  isBeta: Boolean
  reportStatus: ENUM_TWREPORT_REPORTSTATUS!
  reportComment: String
  voteCount: Int
  added: Boolean
  site: Twsite
  screenshot(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

"""Tube Worm sites"""
type Twsite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  siteID: Int!
  latitude: Float!
  longitude: Float!
  count: Int
  verified: Boolean!
  visible: Boolean
  discoveredBy: Cmdr
}

type UploadFile {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  role: UsersPermissionsRole
}

"""Automated journal reports for Unknown Signal Sources"""
type Ussreport {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  systemName: String
  type: String
  cmdrName: String
  cmdrComment: String
  isBeta: Boolean
  screenshot: UploadFile
  reportStatus: ENUM_USSREPORT_REPORTSTATUS!
  reportComment: String
  added: Boolean
  site: Usssite
  ussRawJson: JSON
}

"""Unknown Signal Source sites"""
type Usssite {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  location: Location
  type: Usstype
  threatLevel: Int
  discoveredBy: Cmdr
}

"""Type of Unknown Signal Sources"""
type Usstype {
  id: ID!
  type: String!
  journalName: String!
}
