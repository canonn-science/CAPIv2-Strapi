"""Atmosphere composition of a body"""
type Atmosphere {
  id: String
  created_at: String
  updated_at: String
  body: Body
  argon: Float
  ammonia: Float
  carbonDioxide: Float
  hydrogen: Float
  helium: Float
  iron: Float
  neon: Float
  methane: Float
  nitrogen: Float
  oxygen: Float
  silicates: Float
  sulphurDioxide: Float
  water: Float
}

"""Bark Mound Sites"""
type Bmsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  type: String
  verified: Boolean
  visible: Boolean
}

"""Bodies stored in the Canonn database"""
type Body {
  id: String
  created_at: String
  updated_at: String
  system: System
  bodyName: String
  edsmID: Float
  edsmID64: Float
  edsmType: String
  edsmSubtype: String
  edsmOffset: Int
  edsmDistanceToArrival: Float
  edsmIsMainStar: Boolean
  edsmIsScoopable: Boolean
  edsmIsLandable: Boolean
  edsmAge: Int
  edsmLuminosity: String
  edsmAbsoluteMagnitude: Float
  edsmSolarMasses: Float
  edsmSolarRadius: Float
  edsmGravity: Float
  edsmEarthMasses: Float
  edsmRadius: Float
  edsmSurfaceTemperature: Float
  edsmVolcanismType: String
  edsmAtmosphereType: String
  edsmTerraformingState: String
  edsmOrbitalPeriod: Float
  edsmSemiMajorAxis: Float
  edsmOrbitalEccentricity: Float
  edsmOrbitalInclination: Float
  edsmArgOfPeriapsis: Float
  edsmRotationalPeriod: Float
  edsmRotationalPeriodTidallyLocked: Boolean
  edsmAxialTilt: Float
  atmosphere: Atmosphere
  material: Material
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  bodyLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Brain Tree Sites"""
type Btsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  verified: Boolean
  visible: Boolean
}

"""Fungal Gourd Sites"""
type Fgsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  verified: Boolean
  visible: Boolean
}

"""Fumarole Sites"""
type Fmsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  type: String
  verified: Boolean
  visible: Boolean
}

"""Generation Ship Sites"""
type Gensite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  shipName: String
  directionSystem: System
  distance: Float
}

"""Guardian Ruin Site"""
type Grsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  type: String
  verified: Boolean
  visible: Boolean
}

"""Guardian Structure Sites"""
type Gssite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  type: String
  hasDatabank: Boolean
  verified: Boolean
  visible: Boolean
}

"""Geyser Sites"""
type Gysite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  type: String
  verified: Boolean
  visible: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Locations for sites within a System, Body, or Ring"""
type Location {
  id: String
  created_at: String
  updated_at: String
  system: System
  body: Body
  ring: Ring
  locationType: String
  bmSite: Bmsite
  btSite: Btsite
  fgSite: Fgsite
  fmSite: Fmsite
  genSite: Gensite
  grSite: Grsite
  gsSite: Gssite
  gySite: Gysite
  lsSite: Lssite
  msSite: Mssite
  tbSite: Tbsite
  tsSite: Tssite
  twSite: Twsite
  ussSite: Usssite
}

"""Lave Spout Sites"""
type Lssite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  type: String
  verified: Boolean
  visible: Boolean
}

"""Material makeup of a body"""
type Material {
  id: String
  created_at: String
  updated_at: String
  body: Body
  antimony: Float
  arsenic: Float
  cadmium: Float
  carbon: Float
  chromium: Float
  germanium: Float
  iron: Float
  manganese: Float
  mercury: Float
  molybdenum: Float
  nickel: Float
  niobium: Float
  phosphorus: Float
  polonium: Float
  ruthenium: Float
  selenium: Float
  sulphur: Float
  technetium: Float
  tellurium: Float
  tin: Float
  tungsten: Float
  vanadium: Float
  yttrium: Float
  zinc: Float
  zirconium: Float
}

union Morph = Atmosphere | Bmsite | Body | Btsite | Fgsite | Fmsite | Gensite | Grsite | Gssite | Gysite | Location | Lssite | Material | Mssite | Ring | System | Tbsite | Tssite | Twsite | Usssite | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

"""Mega-Ship Sites"""
type Mssite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  shipName: String
  shipTag: String
  type: String
  flightOps: Boolean
  flightSchedule: Boolean
  dockable: Boolean
}

type Query {
  atmosphere(id: String!): Atmosphere
  atmospheres(sort: String, limit: Int, start: Int, where: JSON): [Atmosphere]
  bmsite(id: String!): Bmsite
  bmsites(sort: String, limit: Int, start: Int, where: JSON): [Bmsite]
  body(id: String!): Body
  bodies(sort: String, limit: Int, start: Int, where: JSON): [Body]
  btsite(id: String!): Btsite
  btsites(sort: String, limit: Int, start: Int, where: JSON): [Btsite]
  fgsite(id: String!): Fgsite
  fgsites(sort: String, limit: Int, start: Int, where: JSON): [Fgsite]
  fmsite(id: String!): Fmsite
  fmsites(sort: String, limit: Int, start: Int, where: JSON): [Fmsite]
  gensite(id: String!): Gensite
  gensites(sort: String, limit: Int, start: Int, where: JSON): [Gensite]
  grsite(id: String!): Grsite
  grsites(sort: String, limit: Int, start: Int, where: JSON): [Grsite]
  gssite(id: String!): Gssite
  gssites(sort: String, limit: Int, start: Int, where: JSON): [Gssite]
  gysite(id: String!): Gysite
  gysites(sort: String, limit: Int, start: Int, where: JSON): [Gysite]
  location(id: String!): Location
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  lssite(id: String!): Lssite
  lssites(sort: String, limit: Int, start: Int, where: JSON): [Lssite]
  material(id: String!): Material
  materials(sort: String, limit: Int, start: Int, where: JSON): [Material]
  mssite(id: String!): Mssite
  mssites(sort: String, limit: Int, start: Int, where: JSON): [Mssite]
  ring(id: String!): Ring
  rings(sort: String, limit: Int, start: Int, where: JSON): [Ring]
  system(id: String!): System
  systems(sort: String, limit: Int, start: Int, where: JSON): [System]
  tbsite(id: String!): Tbsite
  tbsites(sort: String, limit: Int, start: Int, where: JSON): [Tbsite]
  tssite(id: String!): Tssite
  tssites(sort: String, limit: Int, start: Int, where: JSON): [Tssite]
  twsite(id: String!): Twsite
  twsites(sort: String, limit: Int, start: Int, where: JSON): [Twsite]
  usssite(id: String!): Usssite
  usssites(sort: String, limit: Int, start: Int, where: JSON): [Usssite]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: String!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: String!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

"""Rings stored in the Canonn database"""
type Ring {
  id: String
  created_at: String
  updated_at: String
  body: Body
  ringName: String
  edsmType: String
  edsmMass: Float
  edsmInnerRadius: Float
  edsmOuterRadius: Float
  ringLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

"""Systems stored in the Canonn database"""
type System {
  id: String
  created_at: String
  updated_at: String
  systemName: String
  edsmID: Float
  edsmID64: Float
  edsmCoordX: Float
  edsmCoordY: Float
  edsmCoordZ: Float
  edsmCoordLocked: Boolean
  bodies(sort: String, limit: Int, start: Int, where: JSON): [Body]
  systemLocations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  genSiteDirection(sort: String, limit: Int, start: Int, where: JSON): [Gensite]
}

"""Thargoid Barnacle Sites"""
type Tbsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  type: String
  verified: Boolean
  visible: Boolean
}

"""Thargoid Structure Sites"""
type Tssite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  status: String
  verified: Boolean
  visible: Boolean
}

"""Tube Worm Sites"""
type Twsite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  siteID: Int
  latitude: Float
  longitude: Float
  count: Int
  type: String
  verified: Boolean
  visible: Boolean
}

type UploadFile {
  id: String
  created_at: String
  updated_at: String
  name: String
  hash: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UsersPermissionsPermission {
  id: String
  type: String
  controller: String
  action: String
  enabled: Boolean
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: String
  name: String
  description: String
  type: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
}

type UsersPermissionsUser {
  id: String
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  role: UsersPermissionsRole
}

"""Unknown Signal Source Sites"""
type Usssite {
  id: String
  created_at: String
  updated_at: String
  location: Location
  type: String
}
